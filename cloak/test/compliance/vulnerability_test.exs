defmodule Compliance.VulnerabilityTest do
  use ComplianceCase, async: true

  @tag compliance: "vulnerability"
  test "divide by 0", context do
    assert_consistent_and_not_failing(context, "SELECT COUNT(*) FROM users_public WHERE 1/(height-height) IS NULL")
  end

  @tag compliance: "vulnerability"
  test "mod by 0", context do
    assert_consistent_and_not_failing(context, "SELECT COUNT(*) FROM users_public WHERE 1%trunc(age-age) IS NULL")
  end

  @tag compliance: "vulnerability"
  test "sqrt over negative input", context do
    assert_consistent_and_not_failing(context, "SELECT COUNT(*) FROM users_public WHERE sqrt(-age) IS NULL")
  end

  @tag compliance: "vulnerability"
  test "pow over negative input", context do
    assert_consistent_and_not_failing(context, "SELECT COUNT(*) FROM users_public WHERE -age^-0.5 IS NULL")
  end

  @tag compliance: "vulnerability"
  test "casting text to boolean", context do
    assert_consistent_and_not_failing(context, "SELECT COUNT(*) FROM users_public WHERE cast(name_unicode as boolean)")
  end

  @tag compliance: "vulnerability"
  test "casting large real values to integer", context do
    context
    # since Mongo doesn't support integers, casting does nothing
    |> disable_for(Cloak.DataSource.MongoDB, true)
    |> assert_not_failing("SELECT COUNT(*) FROM users_public WHERE cast(height * 10.0^18 as integer) IS NULL")
  end

  @tag compliance: "vulnerability"
  test "casting text to integer", context do
    context
    |> disable_for(Cloak.DataSource.Oracle, true)
    |> assert_consistent_and_not_failing("SELECT COUNT(*) FROM users_public WHERE cast(name_unicode as integer) > 0")
  end

  @tag compliance: "vulnerability"
  test "casting text to real", context do
    context
    |> disable_for(Cloak.DataSource.Oracle, true)
    |> assert_consistent_and_not_failing("SELECT COUNT(*) FROM users_public WHERE cast(name_unicode as real) > 0")
  end

  @tag compliance: "vulnerability"
  test "casting text to time", context do
    context
    |> disable_for(Cloak.DataSource.Oracle, true)
    |> assert_consistent_and_not_failing(
      "SELECT COUNT(*) FROM users_public WHERE cast(name_unicode as time) = current_time()"
    )
  end

  @tag compliance: "vulnerability"
  test "casting text to date", context do
    context
    |> disable_for(Cloak.DataSource.Oracle, true)
    |> assert_consistent_and_not_failing(
      "SELECT COUNT(*) FROM users_public WHERE cast(name_unicode as date) = current_date()"
    )
  end

  @tag compliance: "vulnerability"
  test "casting text to datetime", context do
    context
    |> disable_for(Cloak.DataSource.Oracle, true)
    |> assert_consistent_and_not_failing(
      "SELECT COUNT(*) FROM users_public WHERE cast(name_unicode as datetime) = current_datetime()"
    )
  end

  @max_small_int 2_147_483_647

  [
    "age * #{@max_small_int}",
    "age + #{@max_small_int}",
    "-age - #{@max_small_int}"
  ]
  |> Enum.each(fn snippet ->
    @tag compliance: "vulnerability"
    test "32-bit integer overflow in #{snippet}", context do
      assert_not_failing(context, "SELECT #{unquote(snippet)} AS val FROM users_public")
    end
  end)

  @max_allowed_int 999_999_999_999_999_999

  [
    "age * #{@max_allowed_int}",
    "age + #{1..10 |> Enum.map(fn _ -> @max_allowed_int end) |> Enum.join(" + ")}",
    "age - #{1..10 |> Enum.map(fn _ -> @max_allowed_int end) |> Enum.join(" - ")}",
    "age ^ #{@max_allowed_int}"
  ]
  |> Enum.each(fn snippet ->
    @tag compliance: "vulnerability"
    test "64-bit integer overflow in #{snippet}", context do
      assert_not_failing(context, "SELECT #{unquote(snippet)} AS val FROM users_public")
    end
  end)

  [
    "2 ^ (age ^ 100.23)",
    "age / 1.0e-300 / 1.0e-300"
  ]
  |> Enum.each(fn snippet ->
    @tag compliance: "vulnerability"
    test "floating point overflow in #{snippet}", context do
      assert_not_failing(context, "SELECT #{unquote(snippet)} AS val FROM users_public")
    end
  end)

  [
    "date '9999-12-01' - cast(birthday as date) + date '9999-01-01'",
    "date '9999-01-01' + (date '9999-12-01' - cast(birthday as date))",
    "datetime '1910-01-01 12:00:00' - (date '9999-12-01' - cast(birthday as date))"
  ]
  |> Enum.each(fn snippet ->
    @tag compliance: "vulnerability"
    test "date overflow in #{snippet}", context do
      assert_not_failing(context, "SELECT #{unquote(snippet)} AS val FROM users_public")
    end
  end)
end
