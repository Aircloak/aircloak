#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                val |= 1 << i;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            self.set_bit(i + bit_offset, val_bit_is_set);
        }
    }
}
pub const SIZEOF_CHAR: ::std::os::raw::c_uint = 1;
pub const SIZEOF_SHORT: ::std::os::raw::c_uint = 2;
pub const SIZEOF_INT: ::std::os::raw::c_uint = 4;
pub const SIZEOF_LONG: ::std::os::raw::c_uint = 8;
pub const SIZEOF_LONG_LONG: ::std::os::raw::c_uint = 8;
pub const SIZEOF_VOID_P: ::std::os::raw::c_uint = 8;
pub const ERL_NAPI_SINT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const ERL_NAPI_SINT64_MIN__: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ERTS_NAPI_TIME_ERROR__: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ERTS_NAPI_SEC__: ::std::os::raw::c_uint = 0;
pub const ERTS_NAPI_MSEC__: ::std::os::raw::c_uint = 1;
pub const ERTS_NAPI_USEC__: ::std::os::raw::c_uint = 2;
pub const ERTS_NAPI_NSEC__: ::std::os::raw::c_uint = 3;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const _BSD_SOURCE: ::std::os::raw::c_uint = 1;
pub const _SVID_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_BSD: ::std::os::raw::c_uint = 1;
pub const __USE_SVID: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201103;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 19;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_ELISION: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: ::std::os::raw::c_uint = 1;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __ENUM_IDTYPE_T: ::std::os::raw::c_uint = 1;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const __lldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const ERL_DRV_EXTENDED_MARKER: ::std::os::raw::c_uint = 4277071597;
pub const ERL_DRV_EXTENDED_MAJOR_VERSION: ::std::os::raw::c_uint = 3;
pub const ERL_DRV_EXTENDED_MINOR_VERSION: ::std::os::raw::c_uint = 3;
pub const ERL_DRV_MIN_REQUIRED_MAJOR_VERSION_ON_LOAD: ::std::os::raw::c_uint = 2;
pub const PORT_CONTROL_FLAG_BINARY: ::std::os::raw::c_uint = 1;
pub const PORT_CONTROL_FLAG_HEAVY: ::std::os::raw::c_uint = 2;
pub const PORT_FLAG_BINARY: ::std::os::raw::c_uint = 1;
pub const PORT_FLAG_LINE: ::std::os::raw::c_uint = 2;
pub const ERL_DRV_FLAG_USE_PORT_LOCKING: ::std::os::raw::c_uint = 1;
pub const ERL_DRV_FLAG_SOFT_BUSY: ::std::os::raw::c_uint = 2;
pub const ERL_DRV_FLAG_NO_BUSY_MSGQ: ::std::os::raw::c_uint = 4;
pub const ERL_DRV_FLAG_USE_INIT_ACK: ::std::os::raw::c_uint = 8;
pub const DRIVER_CALL_KEEP_BUFFER: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErlDrvSysInfo {
    pub driver_major_version: ::std::os::raw::c_int,
    pub driver_minor_version: ::std::os::raw::c_int,
    pub erts_version: *mut ::std::os::raw::c_char,
    pub otp_release: *mut ::std::os::raw::c_char,
    pub thread_support: ::std::os::raw::c_int,
    pub smp_support: ::std::os::raw::c_int,
    pub async_threads: ::std::os::raw::c_int,
    pub scheduler_threads: ::std::os::raw::c_int,
    pub nif_major_version: ::std::os::raw::c_int,
    pub nif_minor_version: ::std::os::raw::c_int,
    pub dirty_scheduler_support: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ErlDrvSysInfo() {
    assert_eq!(
        ::std::mem::size_of::<ErlDrvSysInfo>(),
        56usize,
        concat!("Size of: ", stringify!(ErlDrvSysInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ErlDrvSysInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ErlDrvSysInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ErlDrvSysInfo>())).driver_major_version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(driver_major_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ErlDrvSysInfo>())).driver_minor_version as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(driver_minor_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvSysInfo>())).erts_version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(erts_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvSysInfo>())).otp_release as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(otp_release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvSysInfo>())).thread_support as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(thread_support)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvSysInfo>())).smp_support as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(smp_support)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvSysInfo>())).async_threads as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(async_threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvSysInfo>())).scheduler_threads as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(scheduler_threads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvSysInfo>())).nif_major_version as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(nif_major_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvSysInfo>())).nif_minor_version as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(nif_minor_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ErlDrvSysInfo>())).dirty_scheduler_support as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvSysInfo),
            "::",
            stringify!(dirty_scheduler_support)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErlDrvThreadOpts {
    pub suggested_stack_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ErlDrvThreadOpts() {
    assert_eq!(
        ::std::mem::size_of::<ErlDrvThreadOpts>(),
        4usize,
        concat!("Size of: ", stringify!(ErlDrvThreadOpts))
    );
    assert_eq!(
        ::std::mem::align_of::<ErlDrvThreadOpts>(),
        4usize,
        concat!("Alignment of ", stringify!(ErlDrvThreadOpts))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ErlDrvThreadOpts>())).suggested_stack_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvThreadOpts),
            "::",
            stringify!(suggested_stack_size)
        )
    );
}
pub const ErlDirtyJobFlags_ERL_DIRTY_JOB_CPU_BOUND: ErlDirtyJobFlags = 1;
pub const ErlDirtyJobFlags_ERL_DIRTY_JOB_IO_BOUND: ErlDirtyJobFlags = 2;
pub type ErlDirtyJobFlags = u32;
pub const ErlNifSelectFlags_ERL_NIF_SELECT_READ: ErlNifSelectFlags = 1;
pub const ErlNifSelectFlags_ERL_NIF_SELECT_WRITE: ErlNifSelectFlags = 2;
pub const ErlNifSelectFlags_ERL_NIF_SELECT_STOP: ErlNifSelectFlags = 4;
pub type ErlNifSelectFlags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErlDrvMonitor {
    pub data: [::std::os::raw::c_uchar; 32usize],
}
#[test]
fn bindgen_test_layout_ErlDrvMonitor() {
    assert_eq!(
        ::std::mem::size_of::<ErlDrvMonitor>(),
        32usize,
        concat!("Size of: ", stringify!(ErlDrvMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ErlDrvMonitor>(),
        1usize,
        concat!("Alignment of ", stringify!(ErlDrvMonitor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvMonitor>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvMonitor),
            "::",
            stringify!(data)
        )
    );
}
pub type ErlNapiUInt64 = ::std::os::raw::c_ulong;
pub type ErlNapiSInt64 = ::std::os::raw::c_long;
pub type ErlNapiUInt = ErlNapiUInt64;
pub type ErlNapiSInt = ErlNapiSInt64;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__kind as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__spins as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__elision as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__futex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__total_seq as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__total_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__wakeup_seq as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__wakeup_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__woken_seq as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__woken_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__mutex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__mutex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__nwaiters as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__nwaiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__broadcast_seq as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__broadcast_seq)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__readers_wakeup as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__readers_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer_wakeup as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers_queued
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_writers_queued
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_writers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad1 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__flags)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SysIOVec {
    pub iov_base: *mut ::std::os::raw::c_char,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_SysIOVec() {
    assert_eq!(
        ::std::mem::size_of::<SysIOVec>(),
        16usize,
        concat!("Size of: ", stringify!(SysIOVec))
    );
    assert_eq!(
        ::std::mem::align_of::<SysIOVec>(),
        8usize,
        concat!("Alignment of ", stringify!(SysIOVec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SysIOVec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SysIOVec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SysIOVec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SysIOVec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub __wait_terminated: wait__bindgen_ty_1,
    pub __wait_stopped: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_termsig: ::std::os::raw::c_uint,
        __w_coredump: ::std::os::raw::c_uint,
        __w_retcode: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let __w_termsig: u32 = unsafe { ::std::mem::transmute(__w_termsig) };
            __w_termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __w_coredump: u32 = unsafe { ::std::mem::transmute(__w_coredump) };
            __w_coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_retcode: u32 = unsafe { ::std::mem::transmute(__w_retcode) };
            __w_retcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_stopval: ::std::os::raw::c_uint,
        __w_stopsig: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let __w_stopval: u32 = unsafe { ::std::mem::transmute(__w_stopval) };
            __w_stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_stopsig: u32 = unsafe { ::std::mem::transmute(__w_stopsig) };
            __w_stopsig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_terminated as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_terminated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_stopped as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_stopped)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __WAIT_STATUS {
    pub __uptr: *mut wait,
    pub __iptr: *mut ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Size of: ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__uptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__uptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__iptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__iptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *const ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type ErlDrvUInt64 = ErlNapiUInt64;
pub type ErlDrvSInt64 = ErlNapiSInt64;
pub type ErlDrvUInt = ErlNapiUInt;
pub type ErlDrvSInt = ErlNapiSInt;
pub type ErlDrvTermData = ErlNapiUInt;
pub type ErlDrvSizeT = usize;
pub type ErlDrvSSizeT = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct erl_drv_binary {
    pub orig_size: ErlDrvSInt,
    pub orig_bytes: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_erl_drv_binary() {
    assert_eq!(
        ::std::mem::size_of::<erl_drv_binary>(),
        16usize,
        concat!("Size of: ", stringify!(erl_drv_binary))
    );
    assert_eq!(
        ::std::mem::align_of::<erl_drv_binary>(),
        8usize,
        concat!("Alignment of ", stringify!(erl_drv_binary))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_binary>())).orig_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_binary),
            "::",
            stringify!(orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_binary>())).orig_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_binary),
            "::",
            stringify!(orig_bytes)
        )
    );
}
pub type ErlDrvBinary = erl_drv_binary;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _erl_drv_data {
    _unused: [u8; 0],
}
pub type ErlDrvData = *mut _erl_drv_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _erl_drv_event {
    _unused: [u8; 0],
}
pub type ErlDrvEvent = *mut _erl_drv_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _erl_drv_port {
    _unused: [u8; 0],
}
pub type ErlDrvPort = *mut _erl_drv_port;
pub type ErlDrvThreadData = *mut _erl_drv_port;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct erl_drv_event_data {
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_erl_drv_event_data() {
    assert_eq!(
        ::std::mem::size_of::<erl_drv_event_data>(),
        4usize,
        concat!("Size of: ", stringify!(erl_drv_event_data))
    );
    assert_eq!(
        ::std::mem::align_of::<erl_drv_event_data>(),
        2usize,
        concat!("Alignment of ", stringify!(erl_drv_event_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_event_data>())).events as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_event_data),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_event_data>())).revents as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_event_data),
            "::",
            stringify!(revents)
        )
    );
}
pub type ErlDrvEventData = *mut erl_drv_event_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErlDrvNowData {
    pub megasecs: ::std::os::raw::c_ulong,
    pub secs: ::std::os::raw::c_ulong,
    pub microsecs: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_ErlDrvNowData() {
    assert_eq!(
        ::std::mem::size_of::<ErlDrvNowData>(),
        24usize,
        concat!("Size of: ", stringify!(ErlDrvNowData))
    );
    assert_eq!(
        ::std::mem::align_of::<ErlDrvNowData>(),
        8usize,
        concat!("Alignment of ", stringify!(ErlDrvNowData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvNowData>())).megasecs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvNowData),
            "::",
            stringify!(megasecs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvNowData>())).secs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvNowData),
            "::",
            stringify!(secs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ErlDrvNowData>())).microsecs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ErlDrvNowData),
            "::",
            stringify!(microsecs)
        )
    );
}
pub type ErlDrvTime = ErlDrvSInt64;
pub const ErlDrvTimeUnit_ERL_DRV_SEC: ErlDrvTimeUnit = 0;
pub const ErlDrvTimeUnit_ERL_DRV_MSEC: ErlDrvTimeUnit = 1;
pub const ErlDrvTimeUnit_ERL_DRV_USEC: ErlDrvTimeUnit = 2;
pub const ErlDrvTimeUnit_ERL_DRV_NSEC: ErlDrvTimeUnit = 3;
pub type ErlDrvTimeUnit = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct erl_io_vec {
    pub vsize: ::std::os::raw::c_int,
    pub size: ErlDrvSizeT,
    pub iov: *mut SysIOVec,
    pub binv: *mut *mut ErlDrvBinary,
}
#[test]
fn bindgen_test_layout_erl_io_vec() {
    assert_eq!(
        ::std::mem::size_of::<erl_io_vec>(),
        32usize,
        concat!("Size of: ", stringify!(erl_io_vec))
    );
    assert_eq!(
        ::std::mem::align_of::<erl_io_vec>(),
        8usize,
        concat!("Alignment of ", stringify!(erl_io_vec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_io_vec>())).vsize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_io_vec),
            "::",
            stringify!(vsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_io_vec>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_io_vec),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_io_vec>())).iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_io_vec),
            "::",
            stringify!(iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_io_vec>())).binv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_io_vec),
            "::",
            stringify!(binv)
        )
    );
}
pub type ErlIOVec = erl_io_vec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErlDrvTid_ {
    _unused: [u8; 0],
}
pub type ErlDrvTid = *mut ErlDrvTid_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErlDrvMutex_ {
    _unused: [u8; 0],
}
pub type ErlDrvMutex = ErlDrvMutex_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErlDrvCond_ {
    _unused: [u8; 0],
}
pub type ErlDrvCond = ErlDrvCond_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErlDrvRWLock_ {
    _unused: [u8; 0],
}
pub type ErlDrvRWLock = ErlDrvRWLock_;
pub type ErlDrvTSDKey = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct erl_drv_port_data_lock {
    _unused: [u8; 0],
}
pub type ErlDrvPDL = *mut erl_drv_port_data_lock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct erl_drv_entry {
    pub init: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(port: ErlDrvPort, command: *mut ::std::os::raw::c_char) -> ErlDrvData,
    >,
    pub stop: ::std::option::Option<unsafe extern "C" fn(drv_data: ErlDrvData)>,
    pub output: ::std::option::Option<
        unsafe extern "C" fn(
            drv_data: ErlDrvData,
            buf: *mut ::std::os::raw::c_char,
            len: ErlDrvSizeT,
        ),
    >,
    pub ready_input:
        ::std::option::Option<unsafe extern "C" fn(drv_data: ErlDrvData, event: ErlDrvEvent)>,
    pub ready_output:
        ::std::option::Option<unsafe extern "C" fn(drv_data: ErlDrvData, event: ErlDrvEvent)>,
    pub driver_name: *mut ::std::os::raw::c_char,
    pub finish: ::std::option::Option<unsafe extern "C" fn()>,
    pub handle: *mut ::std::os::raw::c_void,
    pub control: ::std::option::Option<
        unsafe extern "C" fn(
            drv_data: ErlDrvData,
            command: ::std::os::raw::c_uint,
            buf: *mut ::std::os::raw::c_char,
            len: ErlDrvSizeT,
            rbuf: *mut *mut ::std::os::raw::c_char,
            rlen: ErlDrvSizeT,
        ) -> ErlDrvSSizeT,
    >,
    pub timeout: ::std::option::Option<unsafe extern "C" fn(drv_data: ErlDrvData)>,
    pub outputv:
        ::std::option::Option<unsafe extern "C" fn(drv_data: ErlDrvData, ev: *mut ErlIOVec)>,
    pub ready_async: ::std::option::Option<
        unsafe extern "C" fn(drv_data: ErlDrvData, thread_data: ErlDrvThreadData),
    >,
    pub flush: ::std::option::Option<unsafe extern "C" fn(drv_data: ErlDrvData)>,
    pub call: ::std::option::Option<
        unsafe extern "C" fn(
            drv_data: ErlDrvData,
            command: ::std::os::raw::c_uint,
            buf: *mut ::std::os::raw::c_char,
            len: ErlDrvSizeT,
            rbuf: *mut *mut ::std::os::raw::c_char,
            rlen: ErlDrvSizeT,
            flags: *mut ::std::os::raw::c_uint,
        ) -> ErlDrvSSizeT,
    >,
    pub event: ::std::option::Option<
        unsafe extern "C" fn(drv_data: ErlDrvData, event: ErlDrvEvent, event_data: ErlDrvEventData),
    >,
    pub extended_marker: ::std::os::raw::c_int,
    pub major_version: ::std::os::raw::c_int,
    pub minor_version: ::std::os::raw::c_int,
    pub driver_flags: ::std::os::raw::c_int,
    pub handle2: *mut ::std::os::raw::c_void,
    pub process_exit: ::std::option::Option<
        unsafe extern "C" fn(drv_data: ErlDrvData, monitor: *mut ErlDrvMonitor),
    >,
    pub stop_select: ::std::option::Option<
        unsafe extern "C" fn(event: ErlDrvEvent, reserved: *mut ::std::os::raw::c_void),
    >,
    pub emergency_close: ::std::option::Option<unsafe extern "C" fn(drv_data: ErlDrvData)>,
}
#[test]
fn bindgen_test_layout_erl_drv_entry() {
    assert_eq!(
        ::std::mem::size_of::<erl_drv_entry>(),
        176usize,
        concat!("Size of: ", stringify!(erl_drv_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<erl_drv_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(erl_drv_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).stop as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).output as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).ready_input as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(ready_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).ready_output as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(ready_output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).driver_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(driver_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).finish as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(finish)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).handle as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).control as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).timeout as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).outputv as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(outputv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).ready_async as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(ready_async)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).flush as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).call as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).event as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).extended_marker as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(extended_marker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).major_version as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(major_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).minor_version as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(minor_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).driver_flags as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(driver_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).handle2 as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(handle2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).process_exit as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(process_exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).stop_select as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(stop_select)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<erl_drv_entry>())).emergency_close as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(erl_drv_entry),
            "::",
            stringify!(emergency_close)
        )
    );
}
pub type ErlDrvEntry = erl_drv_entry;
extern "C" {
    pub fn erl_drv_busy_msgq_limits(
        port: ErlDrvPort,
        low: *mut ErlDrvSizeT,
        high: *mut ErlDrvSizeT,
    );
}
extern "C" {
    pub fn driver_select(
        port: ErlDrvPort,
        event: ErlDrvEvent,
        mode: ::std::os::raw::c_int,
        on: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_event(
        port: ErlDrvPort,
        event: ErlDrvEvent,
        event_data: ErlDrvEventData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_output(
        port: ErlDrvPort,
        buf: *mut ::std::os::raw::c_char,
        len: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_output2(
        port: ErlDrvPort,
        hbuf: *mut ::std::os::raw::c_char,
        hlen: ErlDrvSizeT,
        buf: *mut ::std::os::raw::c_char,
        len: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_output_binary(
        port: ErlDrvPort,
        hbuf: *mut ::std::os::raw::c_char,
        hlen: ErlDrvSizeT,
        bin: *mut ErlDrvBinary,
        offset: ErlDrvSizeT,
        len: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_outputv(
        port: ErlDrvPort,
        hbuf: *mut ::std::os::raw::c_char,
        hlen: ErlDrvSizeT,
        ev: *mut ErlIOVec,
        skip: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_vec_to_buf(
        ev: *mut ErlIOVec,
        buf: *mut ::std::os::raw::c_char,
        len: ErlDrvSizeT,
    ) -> ErlDrvSizeT;
}
extern "C" {
    pub fn driver_set_timer(
        port: ErlDrvPort,
        time: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_cancel_timer(port: ErlDrvPort) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_read_timer(
        port: ErlDrvPort,
        time_left: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_consume_timeslice(
        port: ErlDrvPort,
        percent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_errno_id(error: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn driver_failure_eof(port: ErlDrvPort) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_failure_atom(
        port: ErlDrvPort,
        string: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_failure_posix(
        port: ErlDrvPort,
        error: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_failure(port: ErlDrvPort, error: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_exit(port: ErlDrvPort, err: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_pdl_create(arg1: ErlDrvPort) -> ErlDrvPDL;
}
extern "C" {
    pub fn driver_pdl_lock(arg1: ErlDrvPDL);
}
extern "C" {
    pub fn driver_pdl_unlock(arg1: ErlDrvPDL);
}
extern "C" {
    pub fn driver_pdl_get_refc(arg1: ErlDrvPDL) -> ErlDrvSInt;
}
extern "C" {
    pub fn driver_pdl_inc_refc(arg1: ErlDrvPDL) -> ErlDrvSInt;
}
extern "C" {
    pub fn driver_pdl_dec_refc(arg1: ErlDrvPDL) -> ErlDrvSInt;
}
extern "C" {
    pub fn driver_monitor_process(
        port: ErlDrvPort,
        process: ErlDrvTermData,
        monitor: *mut ErlDrvMonitor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_demonitor_process(
        port: ErlDrvPort,
        monitor: *const ErlDrvMonitor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_get_monitored_process(
        port: ErlDrvPort,
        monitor: *const ErlDrvMonitor,
    ) -> ErlDrvTermData;
}
extern "C" {
    pub fn driver_compare_monitors(
        monitor1: *const ErlDrvMonitor,
        monitor2: *const ErlDrvMonitor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_busy_port(port: ErlDrvPort, on: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_port_control_flags(port: ErlDrvPort, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_port_flags(port: ErlDrvPort) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_alloc_binary(size: ErlDrvSizeT) -> *mut ErlDrvBinary;
}
extern "C" {
    pub fn driver_realloc_binary(bin: *mut ErlDrvBinary, size: ErlDrvSizeT) -> *mut ErlDrvBinary;
}
extern "C" {
    pub fn driver_free_binary(bin: *mut ErlDrvBinary);
}
extern "C" {
    pub fn driver_binary_get_refc(dbp: *mut ErlDrvBinary) -> ErlDrvSInt;
}
extern "C" {
    pub fn driver_binary_inc_refc(dbp: *mut ErlDrvBinary) -> ErlDrvSInt;
}
extern "C" {
    pub fn driver_binary_dec_refc(dbp: *mut ErlDrvBinary) -> ErlDrvSInt;
}
extern "C" {
    pub fn driver_alloc(size: ErlDrvSizeT) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn driver_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: ErlDrvSizeT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn driver_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn driver_enq(
        port: ErlDrvPort,
        buf: *mut ::std::os::raw::c_char,
        len: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_pushq(
        port: ErlDrvPort,
        buf: *mut ::std::os::raw::c_char,
        len: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_deq(port: ErlDrvPort, size: ErlDrvSizeT) -> ErlDrvSizeT;
}
extern "C" {
    pub fn driver_sizeq(port: ErlDrvPort) -> ErlDrvSizeT;
}
extern "C" {
    pub fn driver_enq_bin(
        port: ErlDrvPort,
        bin: *mut ErlDrvBinary,
        offset: ErlDrvSizeT,
        len: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_pushq_bin(
        port: ErlDrvPort,
        bin: *mut ErlDrvBinary,
        offset: ErlDrvSizeT,
        len: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_peekqv(port: ErlDrvPort, ev: *mut ErlIOVec) -> ErlDrvSizeT;
}
extern "C" {
    pub fn driver_peekq(port: ErlDrvPort, vlen: *mut ::std::os::raw::c_int) -> *mut SysIOVec;
}
extern "C" {
    pub fn driver_enqv(
        port: ErlDrvPort,
        ev: *mut ErlIOVec,
        skip: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_pushqv(
        port: ErlDrvPort,
        ev: *mut ErlIOVec,
        skip: ErlDrvSizeT,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_driver_entry(de: *mut ErlDrvEntry);
}
extern "C" {
    pub fn remove_driver_entry(de: *mut ErlDrvEntry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_system_info(sip: *mut ErlDrvSysInfo, si_size: usize);
}
extern "C" {
    pub fn erl_drv_mutex_create(name: *mut ::std::os::raw::c_char) -> *mut ErlDrvMutex;
}
extern "C" {
    pub fn erl_drv_mutex_destroy(mtx: *mut ErlDrvMutex);
}
extern "C" {
    pub fn erl_drv_mutex_trylock(mtx: *mut ErlDrvMutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_mutex_lock(mtx: *mut ErlDrvMutex);
}
extern "C" {
    pub fn erl_drv_mutex_unlock(mtx: *mut ErlDrvMutex);
}
extern "C" {
    pub fn erl_drv_cond_create(name: *mut ::std::os::raw::c_char) -> *mut ErlDrvCond;
}
extern "C" {
    pub fn erl_drv_cond_destroy(cnd: *mut ErlDrvCond);
}
extern "C" {
    pub fn erl_drv_cond_signal(cnd: *mut ErlDrvCond);
}
extern "C" {
    pub fn erl_drv_cond_broadcast(cnd: *mut ErlDrvCond);
}
extern "C" {
    pub fn erl_drv_cond_wait(cnd: *mut ErlDrvCond, mtx: *mut ErlDrvMutex);
}
extern "C" {
    pub fn erl_drv_rwlock_create(name: *mut ::std::os::raw::c_char) -> *mut ErlDrvRWLock;
}
extern "C" {
    pub fn erl_drv_rwlock_destroy(rwlck: *mut ErlDrvRWLock);
}
extern "C" {
    pub fn erl_drv_rwlock_tryrlock(rwlck: *mut ErlDrvRWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_rwlock_rlock(rwlck: *mut ErlDrvRWLock);
}
extern "C" {
    pub fn erl_drv_rwlock_runlock(rwlck: *mut ErlDrvRWLock);
}
extern "C" {
    pub fn erl_drv_rwlock_tryrwlock(rwlck: *mut ErlDrvRWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_rwlock_rwlock(rwlck: *mut ErlDrvRWLock);
}
extern "C" {
    pub fn erl_drv_rwlock_rwunlock(rwlck: *mut ErlDrvRWLock);
}
extern "C" {
    pub fn erl_drv_tsd_key_create(
        name: *mut ::std::os::raw::c_char,
        key: *mut ErlDrvTSDKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_tsd_key_destroy(key: ErlDrvTSDKey);
}
extern "C" {
    pub fn erl_drv_tsd_set(key: ErlDrvTSDKey, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn erl_drv_tsd_get(key: ErlDrvTSDKey) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn erl_drv_thread_opts_create(name: *mut ::std::os::raw::c_char) -> *mut ErlDrvThreadOpts;
}
extern "C" {
    pub fn erl_drv_thread_opts_destroy(opts: *mut ErlDrvThreadOpts);
}
extern "C" {
    pub fn erl_drv_thread_create(
        name: *mut ::std::os::raw::c_char,
        tid: *mut ErlDrvTid,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        args: *mut ::std::os::raw::c_void,
        opts: *mut ErlDrvThreadOpts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_thread_self() -> ErlDrvTid;
}
extern "C" {
    pub fn erl_drv_equal_tids(tid1: ErlDrvTid, tid2: ErlDrvTid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_thread_exit(resp: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn erl_drv_thread_join(
        arg1: ErlDrvTid,
        respp: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_mutex_name(mtx: *mut ErlDrvMutex) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erl_drv_cond_name(cnd: *mut ErlDrvCond) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erl_drv_rwlock_name(rwlck: *mut ErlDrvRWLock) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erl_drv_thread_name(tid: ErlDrvTid) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn null_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_mk_atom(arg1: *mut ::std::os::raw::c_char) -> ErlDrvTermData;
}
extern "C" {
    pub fn driver_mk_port(arg1: ErlDrvPort) -> ErlDrvTermData;
}
extern "C" {
    pub fn driver_connected(arg1: ErlDrvPort) -> ErlDrvTermData;
}
extern "C" {
    pub fn driver_caller(arg1: ErlDrvPort) -> ErlDrvTermData;
}
extern "C" {
    #[link_name = "\u{1}driver_term_nil"]
    pub static mut driver_term_nil: ErlDrvTermData;
}
extern "C" {
    pub fn driver_mk_term_nil() -> ErlDrvTermData;
}
extern "C" {
    pub fn driver_create_port(
        creator_port: ErlDrvPort,
        connected: ErlDrvTermData,
        name: *mut ::std::os::raw::c_char,
        drv_data: ErlDrvData,
    ) -> ErlDrvPort;
}
extern "C" {
    pub fn driver_output_term(
        ix: ErlDrvPort,
        data: *mut ErlDrvTermData,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_send_term(
        ix: ErlDrvPort,
        to: ErlDrvTermData,
        data: *mut ErlDrvTermData,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_output_term(
        port: ErlDrvTermData,
        data: *mut ErlDrvTermData,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_send_term(
        port: ErlDrvTermData,
        to: ErlDrvTermData,
        data: *mut ErlDrvTermData,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_async_port_key(port: ErlDrvPort) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn driver_async(
        ix: ErlDrvPort,
        key: *mut ::std::os::raw::c_uint,
        async_invoke: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        async_data: *mut ::std::os::raw::c_void,
        async_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn driver_lock_driver(ix: ErlDrvPort) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_get_now(now: *mut ErlDrvNowData) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_monotonic_time(time_unit: ErlDrvTimeUnit) -> ErlDrvTime;
}
extern "C" {
    pub fn erl_drv_time_offset(time_unit: ErlDrvTimeUnit) -> ErlDrvTime;
}
extern "C" {
    pub fn erl_drv_convert_time_unit(
        val: ErlDrvTime,
        from: ErlDrvTimeUnit,
        to: ErlDrvTimeUnit,
    ) -> ErlDrvTime;
}
extern "C" {
    pub fn driver_dl_open(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn driver_dl_sym(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn driver_dl_close(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn driver_dl_error() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erl_drv_putenv(
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_getenv(
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        value_size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erl_drv_init_ack(ix: ErlDrvPort, res: ErlDrvData);
}
extern "C" {
    pub fn erl_drv_set_os_pid(ix: ErlDrvPort, pid: ErlDrvSInt);
}
extern "C" {
    pub fn dtrace_drvport_str(port: ErlDrvPort, port_buf: *mut ::std::os::raw::c_char);
}
