CREATE OR REPLACE PACKAGE aircloak AS
  FUNCTION plus(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC;
  FUNCTION plus(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
  FUNCTION sub(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC;
  FUNCTION sub(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
  FUNCTION mul(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC;
  FUNCTION mul(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
  FUNCTION div(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
  FUNCTION pow(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC;
  FUNCTION pow(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
END aircloak;
/

CREATE OR REPLACE PACKAGE BODY aircloak AS
  FUNCTION plus(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC IS
  BEGIN
    RETURN a + b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION plus(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN a + b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION sub(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC IS
  BEGIN
    RETURN a - b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION sub(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN a - b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION mul(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC IS
  BEGIN
    RETURN a * b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION mul(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN a * b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION div(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN a / b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION pow(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC IS
  BEGIN
    RETURN POWER(a, b);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION pow(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN POWER(a, b);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;
END aircloak;
/
