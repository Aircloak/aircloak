user www-data;
worker_processes  4;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
  multi_accept on;
}

http {
  include     /etc/nginx/mime.types;
  access_log  /var/log/nginx/access.log;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  0;
  tcp_nodelay        on;

  gzip  on;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";

  upstream unicorn {
    server unix:/tmp/unicorn.aircloak.sock fail_timeout=0;
  }

  server {
    listen 80 default_server;
    server_name  localhost hello.aircloak.com;

    root /websites/aircloak/current/public;

    location ^~ /assets/ {
      gzip_static on;
      expires max;
      add_header Cache-Control public;
    }

    error_page 500 502 503 504 /500.html;
    try_files $uri/index.html $uri @unicorn;

    client_max_body_size 4G;
    keepalive_timeout 10;

    location @unicorn {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if you forward HTTPS traffic to unicorn,
      # this helps Rack set the proper URL scheme for doing redirects:
      proxy_set_header X-Forwarded-Proto $scheme;

      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # The Rack application may also set "X-Accel-Buffering (yes|no)"
      # in the response headers do disable/enable buffering on a
      # per-response basis.

      proxy_pass http://unicorn;
    }
  }
}

