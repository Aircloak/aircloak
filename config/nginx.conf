user www-data;
worker_processes  4;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
  multi_accept on;
}

http {
  include     /etc/nginx/mime.types;
  access_log  /var/log/nginx/access.log;

  sendfile        on;
  #tcp_nopush     on;

  keepalive_timeout  0;
  tcp_nodelay        on;

  gzip  on;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";

  upstream unicorn {
    server unix:/tmp/unicorn.aircloak.sock fail_timeout=0;
  }

  server {
    listen *:80;
    add_header Strict-Transport-Security max-age=2592000;
    return 301 https://$host$request_uri;
  }

  server {
    listen *:443 ssl default_server;
    server_name  localhost hello.aircloak.com;

    ssl on;
    ssl_certificate /root/cert/aircloak.com.chain.pem;
    ssl_certificate_key /root/cert/aircloak.com.chain.pem;

    # http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_trusted_certificate
    # Unless our certificate contains the trust chain, then
    # we need to specify the CA here.
    # ssl_trusted_certificate ssl/ca.all.pem;

    ssl_session_cache       builtin:1000  shared:SSL:10m;
    ssl_session_timeout     5m;
    ssl_ecdh_curve          secp521r1;

    ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers       on;

    # The following is all one long line. We use an explicit list of ciphers to enable
    # forward secrecy without exposing ciphers vulnerable to the BEAST attack
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:RC4-SHA:HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!CBC:!EDH:!kEDH:!PSK:!SRP:!kECDH;

    # The following is for reference. It needs to be specified again
    # in each virtualhost, in both HTTP and non-HTTP versions.
    add_header Strict-Transport-Security max-age=2592000;

    root /websites/aircloak/current/public;

    location ^~ /assets/ {
      gzip_static on;
      expires max;
      add_header Cache-Control public;
    }

    error_page 500 502 503 504 /500.html;
    try_files $uri/index.html $uri @unicorn;

    client_max_body_size 4G;
    keepalive_timeout 10;

    # Proxies render graph request to the graphite server
    location /metrics/render_graph {
      proxy_pass http://cloakmetrics.mpi-sws.org/render;
    }

    location @unicorn {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if you forward HTTPS traffic to unicorn,
      # this helps Rack set the proper URL scheme for doing redirects:
      proxy_set_header X-Forwarded-Proto $scheme;

      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # The Rack application may also set "X-Accel-Buffering (yes|no)"
      # in the response headers do disable/enable buffering on a
      # per-response basis.

      proxy_pass http://unicorn;
    }
  }
}

