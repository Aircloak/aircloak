title: Understanding the query model
order: 5
content: |

  ## Understanding the query model

  There are four important things to know about how the cloak processes
  queries:

  - the cloak anonymizes data by returning aggregate counts
  - the cloak adds statistical noise to the reported counts
  - the clock suppresses answers if the counts are too low
  - queries are run over individual users, one at a time


  ### The cloak anonymizes data by returning aggregate counts

  All answers reported by the cloak are in terms of aggregate counts.
  You have to take this into account when phrasing your questions.
  _How many users spent more than 10 minutes waiting at the checkout_, or
  _how many users have visited more than 3 retail locations within the last month_
  are questions the cloak can easily answer, whereas _what is the average duration of a visit_ is not.

  In general terms, any question that can be phrased along the lines of _how
  many users ...?_ is a questions the cloak can answer.

  This might seem restrictive, but as it turns out, most questions can be
  phrased in terms of counts, albeit sometimes only by indirection.
  The example above with average durations of a visit could for example instead
  be phrased as _how many users spend less than 10 minutes on average in a store_,
  _how many users spent less than 20 minutes on average in a store_, etc.


  ### The cloak adds statistical noise to the reported counts

  The cloak adds Gaussian noise with a mean of 0 to the answer counts.
  Additionally the noisy counts are rounded to the nearest 5 or 10
  depending on the amount of noise added.


  ### The cloak suppresses answers unless the count is high enough

  An important aspect of the anonymization procedure performed by the cloak
  is to remove answers which would allow the analyst to single out individuals or very small groups.
  Answers where the returned count is too low are therefore withheld completely.
  It therefore might happen that the answer to a query is no answer at all.
  It is usually helpful to ask for information at multiple levels
  of granularity if your dataset is small.
  Instead of only asking: _how many users are of age 10?_, _how many users
  are of age 11?_ etc, you might additionally want to
  ask _how many users are between the ages of 10 and 15?_, _how many users
  are between the ages of 15 and 20?_,
  ... _how many users are between the ages of 10 and 20?_, ...

  You can get some notion of how many properties are filtered out if you go to
  the _Singular View_ of the task results. Under the label
  __number of filtered users__ you should see the number of users for which
  one or more reported properties were suppressed due to low counts.

  If this number is unusually high, then you have a lot of properties which are
  not reported. In this case, consider rephrasing the task according to tips in
  this guide.

  Keep in mind that the number of filtered users doesn't necessarily corresponds
  to the number of suppressed properties. For example, let's say that ten properties
  were suppressed for one user, while twenty properties were suppressed for another
  user. The total reported count will be two, meaning two users with at least one
  suppressed property.

  Finally, to preserve anonymization guarantees, the number of suppressed users
  is itself anonymized just like any other reported property. The reported number
  will therefore not be exact, and if it's low enough it might not even be reported.


  ### Queries are run over individual users, one at a time

  When a query is run, it only has access to the data of a
  single user. It has no memory across multiple executions, or executions over
  the data of different users.
  A query can do arbitrarily complex calculations based on a single user at a time.
  For example it could determine the average amount of time a user spends at a given location,
  waiting for a bus, or on what weekdays a user most frequently visits a parks.

  While executing over a single user, the query has to determine if the user
  should be applied towards the count of some property.
  For example _users who spend more than one hour a week in parks_.

  It is possible to report multiple properties per user. For example, one could report:

  - spent more than 1 minute in parks in total last week
  - spent more than 5 minute in parks in total last week
  - spent more than 15 minute in parks in total last week
  - spent more than 30 minute in parks in total last week
  - spent more than 60 minute in parks in total last week
  - spent more than 120 minute in parks in total last week

  all for the same user.
  The cloak then aggregates these properties for all users
  and returns those that have high enough counts.
