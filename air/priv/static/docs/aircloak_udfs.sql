CREATE OR REPLACE PACKAGE aircloak AS
  FUNCTION plus(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC;
  FUNCTION plus(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
  FUNCTION plus(a DATE, b INTERVAL DAY TO SECOND) RETURN TIMESTAMP DETERMINISTIC;
  FUNCTION plus(a TIMESTAMP, b INTERVAL DAY TO SECOND) RETURN TIMESTAMP DETERMINISTIC;
  FUNCTION sub(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC;
  FUNCTION sub(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
  FUNCTION sub(a DATE, b INTERVAL DAY TO SECOND) RETURN TIMESTAMP DETERMINISTIC;
  FUNCTION sub(a TIMESTAMP, b INTERVAL DAY TO SECOND) RETURN TIMESTAMP DETERMINISTIC;
  FUNCTION mul(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC;
  FUNCTION mul(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
  FUNCTION div(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
  FUNCTION pow(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC;
  FUNCTION pow(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
  FUNCTION nan_to_null(a BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC;
END aircloak;
/

CREATE OR REPLACE PACKAGE BODY aircloak AS
  FUNCTION nan_to_null(a BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    IF a = binary_float_infinity OR a = -binary_float_infinity THEN
      RETURN NULL;
    ELSE
      RETURN NANVL(a, NULL);
    END IF;
  END;

  FUNCTION plus(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC IS
  BEGIN
    RETURN a + b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION plus(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN aircloak.nan_to_null(a + b);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION plus(a DATE, b INTERVAL DAY TO SECOND) RETURN TIMESTAMP DETERMINISTIC IS
  BEGIN
    RETURN a + b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION plus(a TIMESTAMP, b INTERVAL DAY TO SECOND) RETURN TIMESTAMP DETERMINISTIC IS
  BEGIN
    RETURN a + b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION sub(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC IS
  BEGIN
    RETURN a - b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION sub(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN aircloak.nan_to_null(a - b);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION sub(a DATE, b INTERVAL DAY TO SECOND) RETURN TIMESTAMP DETERMINISTIC IS
  BEGIN
    RETURN a - b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION sub(a TIMESTAMP, b INTERVAL DAY TO SECOND) RETURN TIMESTAMP DETERMINISTIC IS
  BEGIN
    RETURN a - b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION mul(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC IS
  BEGIN
    RETURN a * b;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION mul(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN aircloak.nan_to_null(a * b);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION div(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN aircloak.nan_to_null(a / b);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION pow(a INTEGER, b INTEGER) RETURN INTEGER DETERMINISTIC IS
  BEGIN
    RETURN POWER(a, b);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;

  FUNCTION pow(a BINARY_DOUBLE, b BINARY_DOUBLE) RETURN BINARY_DOUBLE DETERMINISTIC IS
  BEGIN
    RETURN aircloak.nan_to_null(POWER(a, b));
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END;
END aircloak;
/
