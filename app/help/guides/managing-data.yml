title: Managing data
order: 2
content: |

  # Managing data

  Inside a cloak cluster, your data is stored in a distributed and replicated Postgres database instance.
  Before uploading data to a cluster, you need to create tables to hold the data.


  ## Tables and clusters

  Database tables only live in a single cluster and can not be migrated from one cluster to another.
  This applies both to the database definitions themselves, as well as the data in the tables.


  ## Naming

  Most any table and column name that is allowed by Postgres is also allowed in a cloak.
  More concretely, the following restrictions are enforced:

  - the table name can contain the characters `a` through `z` in any case, and the numbers `0`
    through `9` as well as contain underscores (`_`)
  - a table name has to start with a character
  - restricted column names which are used by aircloak are not allowed. Currently the list contains the following restricted column names: `user_id`, `created_at`, and `transaction_id`.


  ## Data types

  We support the following Postgres datatypes:

  - integer: signed 4 byte integer which can range from -2147483648 to +2147483647
  - float: 4 byte single precision floating-point number
  - boolean: logical true or false
  - char: fixed length character string
  - varchar: variable length bounded character string
  - text: variable length character string


  ## Uploading data

  We provide an HTTPS API at `/bulk_insert` for uploading data into cloaks.
  You could upload data to any of your cloaks. A full URL for the API might therefore look like `https://<%= sample_cloak_name %>/bulk_insert`.
  It is authenticated using
  client certificates. For more information about authentication, please have a look
  at the <%= help_link "authentication" %> page.

  <% unless has_tables? -%>

  __Please note:__
  In order to be able to upload data to your cloak, you will need to create some database tables first.
  You can do this at the <% site_link tables_path, "tables page" %>.
  <% end %>


  ### Data format

  The JSON data uploaded to a cloak should correspond to the table and column names you have defined
  for your cluster.

  Each payload can contain data for multiple users, and there is _no need to create a user in a cloak
  before uploading data_ for that user for the first time.

  The JSON object per user should have one entry per database table you want to upload for. The entry
  for each database table can contain an array of one or more database rows, where each row need
  to contain all the columns required in the table.
  The data upload will fail if column names are miss-spelled, missing, or the datatype is wrong.

  More concretely, the format should have the following structure

  ```json
  {
    "user-id": {
      "table1_name": [
        {"column_name": value, ...},
        ...
      ]
    },
    ...
  }
  ```

  #### Example

  <% if has_tables? -%>

  If you wanted to upload data from your __<%= sample_table_name %>__ table for the two users __user1__ and __user2__,
  you could upload a JSON payload with the following format

  ```json
  <%= sample_json %>
  ```

  <% else -%>

  Say you wanted to upload data for the users __user1__ and __user2__ to a table called __<%= sample_table_name %>__ which has an
  __x__ and a __y__ column, you would format the data as

  ```json
  <%= sample_json %>
  ```

  <% end -%>

  ### Restrictions

  The individual payloads should not exceed _5mb_ in size. The dataset you upload most likely exceeds this, in which case you want
  to upload it in parts. Feel free to perform multiple uploads in parallel<%
  if current_user.analyst.clusters.select {|cluster| cluster.cloaks.count > 1 }.count > 0 -%>, either to the same cloak or to multiple distinct cloaks within the same cluster.
  <% else %> to the same cloak.
  <% end -%>
